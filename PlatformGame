<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Mobile Platform Game</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }
        #gameCanvas {
            display: block;
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Set canvas size to window size
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Game variables
        let player = { x: 50, y: 0, width: 40, height: 40, dy: 0, jumpPower: -10, onGround: false };
        let platforms = [
            { x: 0, y: canvas.height - 40, width: canvas.width, height: 40 },
            { x: 200, y: canvas.height - 120, width: 100, height: 20 },
            { x: 400, y: canvas.height - 200, width: 100, height: 20 }
        ];
        const gravity = 0.5;

        // Game loop
        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        // Update game state
        function update() {
            player.dy += gravity;
            player.y += player.dy;

            // Check for platform collisions
            player.onGround = false;
            for (let platform of platforms) {
                if (player.y + player.height > platform.y &&
                    player.y < platform.y + platform.height &&
                    player.x + player.width > platform.x &&
                    player.x < platform.x + platform.width) {
                    player.y = platform.y - player.height;
                    player.dy = 0;
                    player.onGround = true;
                    break;
                }
            }

            // Keep player in bounds
            if (player.x < 0) player.x = 0;
            if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;
            if (player.y + player.height > canvas.height) {
                player.y = canvas.height - player.height;
                player.dy = 0;
                player.onGround = true;
            }
        }

        // Draw game objects
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw player
            ctx.fillStyle = 'blue';
            ctx.fillRect(player.x, player.y, player.width, player.height);

            // Draw platforms
            ctx.fillStyle = 'green';
            for (let platform of platforms) {
                ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
            }
        }

        // Touch controls
        let touchStartX = 0;
        canvas.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            if (player.onGround) {
                player.dy = player.jumpPower;
            }
        });

        canvas.addEventListener('touchmove', (e) => {
            const touchX = e.touches[0].clientX;
            const diff = touchX - touchStartX;
            player.x += diff / 5;
            touchStartX = touchX;
        });

        // Start the game
        gameLoop();
    </script>
</body>
</html>
